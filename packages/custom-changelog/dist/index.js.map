{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport { ChangelogFunctions } from '@changesets/types';\nimport { getMetaFromCommit, getMetaFromPullRequest, replaceMeta } from './meta';\nimport { Category, prefixSummary } from './category';\n\ntype Options = {\n  owner: string,\n  repo: string,\n  noThanksUsers?: Array<string>,\n  categories?: Array<Category>,\n}\n\nconst prLink = (owner: string, repo: string, pull: number) => `[#${pull}](https://github.com/${owner}/${repo}/pull/${pull})`;\nconst commitLink = (owner: string, repo: string, commit: string) => `[\\`${commit}\\`](https://github.com/${owner}/${repo}/commit/${commit})`;\nconst userLink = (user: string | null) => (user ? `[@${user}](https://github.com/${user})` : '');\n\nfunction assertRequiredOptionPresence(options: Record<string, any> | null) {\n  if (!process.env.GITHUB_TOKEN) {\n    throw new Error(\n      'Please create a GitHub personal access token at https://github.com/settings/tokens/new'\n      + ' and add it as the GITHUB_TOKEN environment variable',\n    );\n  }\n\n  if (!options?.owner || !options?.repo) {\n    throw new Error(\n      'Please provide a owner and repo to this changelog generator like this:\\n'\n      + '\"changelog\": [\"@changesets/changelog-github\", { \"owner\": \"org\", \"repo\": \"repo\" }]',\n    );\n  }\n}\n\nconst changelogFunctions: ChangelogFunctions = {\n\n  /*\n   * Return changelog's line for updated dependencies.\n   * It return these format:\n   * ```\n   * - Update dependencies [$commitLink1, $commitLink2, ...]:\"\n   *   - $packageName@$newVersion\n   * ```\n   *\n   * ex.\n   * - Updated dependencies [[`27a5a82`](https://github.com/changesets/changesets/commit/27a5a82188914570d192162f9d045dfd082a3c15)]:\n   *   - @changesets/types@4.1.0\n   *\n   * see. https://github.com/changesets/changesets/blob/main/packages/changelog-github/CHANGELOG.md\n   */\n  getDependencyReleaseLine: async(\n      changesets,\n      dependenciesUpdated,\n      dangerOptions,\n  ) => {\n    if (dependenciesUpdated.length === 0) return '';\n\n    assertRequiredOptionPresence(dangerOptions);\n    const options: Options = dangerOptions as Options;\n\n    const commitLinks = changesets\n      .filter(cs => cs.commit != null)\n      .map(cs => commitLink(options.owner, options.repo, cs.commit as string));\n\n    const dependencyReleaseLines = [\n      `- Updated dependencies [${commitLinks.join(', ')}]`,\n      ...(dependenciesUpdated.map(dependency => (\n        `  - ${dependency.name}@${dependency.newVersion}`\n      ))),\n    ]\n      .join('\\n');\n\n    return dependencyReleaseLines;\n  },\n\n  /*\n   * Return changelog's lines per changeset.\n   * ```\n   * - [#$PRLink] [$commitLink] Thanks @$userLink1, @$userLink2, ...! - $changesetSummary#L1\"\n   * changesetSummary#L2\n   * changesetSummary#L3\n   * ...\n   * ```\n   *\n   * ex.\n   * - [#564](https://github.com/changesets/changesets/pull/564) [`707002d`](https://github.com/changesets/changesets/commit/707002dec9332a2c1322522a23861e747a6bff6f) Thanks [@Andarist](https://github.com/Andarist)! - It's now possible to specify multiple authors of a change by using multiple `author: @someuser` lines.\n   *\n   * see. https://github.com/changesets/changesets/blob/main/packages/changelog-github/CHANGELOG.md\n   */\n  getReleaseLine: async(\n      changeset,\n      type,\n      dangerOptions,\n  ) => {\n    assertRequiredOptionPresence(dangerOptions);\n    const options: Options = dangerOptions as Options;\n\n    const { meta: metaFromSummary, summary: replacedSummary } = replaceMeta(changeset.summary);\n    const metaFromPR = metaFromSummary.pull\n      ? await getMetaFromPullRequest(options.owner, options.repo, metaFromSummary.pull)\n      : null;\n    const commitID = metaFromSummary.commit || changeset.commit;\n    const metaFromCommit = commitID\n      ? await getMetaFromCommit(options.owner, options.repo, commitID, { withRelatedPullRequest: true })\n      : null;\n\n    const ignoreUsersFilter = ((it: any) => it != null && (options.noThanksUsers && options.noThanksUsers.indexOf(it) === -1));\n    const meta = {\n      pull: metaFromSummary.pull || metaFromCommit?.pull,\n      commit: metaFromSummary.commit || metaFromPR?.commit || changeset.commit,\n      users: [metaFromSummary.users || metaFromPR?.user || metaFromCommit?.user].flat().filter(ignoreUsersFilter),\n    };\n\n    const [firstLine, ...followingLines] = (\n      options.categories\n        ? await prefixSummary(replacedSummary, options.categories, options.owner, options.repo, meta.commit as string)\n        : replacedSummary\n    )\n      .split('\\n')\n      .map(l => l.trimEnd());\n    const newFirstLine = [\n      firstLine,\n      meta.pull ? `(${prLink(options.owner, options.repo, meta.pull)})` : null,\n      (!meta.pull && meta.commit) ? `[${commitLink(options.owner, options.repo, meta.commit)}]` : null,\n      meta.users.length > 0 ? `Thanks ${meta.users.map(it => userLink(it as string)).join(', ')}!` : null,\n    ]\n      .filter(it => it != null)\n      .join(' ');\n    const releaseLines = [\n      '', // empty line\n      '', // empty line\n      `- ${newFirstLine}`,\n      followingLines\n        .map(l => `  ${l}`)\n        .join('\\n'),\n    ]\n      .join('\\n');\n    return releaseLines;\n  },\n};\n\nexport default changelogFunctions;\n"]}