{"version":3,"file":"meta.js","sourceRoot":"","sources":["../src/meta.ts"],"names":[],"mappings":"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","sourcesContent":["import { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport RegexParser from 'regex-parser';\n\nexport type Meta = {\n  pull: number | null,\n  commit: string | null,\n  users: Array<string> | null,\n}\n\nexport function replaceMeta(summary: string)\n    : { meta: Meta, summary: string } {\n  const meta: Meta = {\n    pull: null,\n    commit: null,\n    users: null,\n  };\n  const processors = [\n    /* Get Pull Request's info */\n    {\n      pattern: '/^\\\\s*(?:pr|pull|pull\\\\s+request):\\\\s*#?(\\\\d+)/im',\n      process: (_: string, pr: string) => {\n        const num = Number(pr);\n        if (!Number.isNaN(num)) meta.pull = num;\n        return '';\n      },\n    },\n    /* Get Commit info */\n    {\n      pattern: '/^\\\\s*commit:\\\\s*([^\\\\s]+)/im',\n      process: (_: string, commit: string) => {\n        meta.commit = commit;\n        return '';\n      },\n    },\n    /* Get users info */\n    {\n      pattern: '/^\\\\s*(?:author|user):\\\\s*@?([^\\\\s]+)/gim',\n      process: (_: string, user: string) => {\n        meta.users = meta.users || [];\n        meta.users.push(user);\n        return '';\n      },\n    },\n  ];\n\n  let replacedSummary = summary;\n  processors.forEach((p) => {\n    replacedSummary = replacedSummary.replace(RegexParser(p.pattern), p.process);\n  });\n  replacedSummary = replacedSummary.trim();\n\n  return {\n    meta,\n    summary: replacedSummary,\n  };\n}\n\nexport async function getMetaFromPullRequest(owner: string, repo: string, pull: number)\n    : Promise<{ user: string | null; commit: string | null; }> {\n  const octokit = new Octokit({\n    auth: process.env.GITHUB_TOKEN,\n  });\n\n  const pr = await octokit.pulls.get({\n    owner,\n    repo,\n    pull_number: pull,\n  });\n\n  return {\n    user: pr.data.head.user.login,\n    commit: pr.data.merge_commit_sha,\n  };\n}\n\ntype ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never\ntype pullType = ArrayElement<RestEndpointMethodTypes['repos']['listPullRequestsAssociatedWithCommit']['response']['data']>\nexport async function getLatestMergedPRAssociatedWithCommit(owner: string, repo: string, commitID: string)\n    : Promise<pullType | undefined> {\n  const octokit = new Octokit({\n    auth: process.env.GITHUB_TOKEN,\n  });\n\n  const prs = await octokit.rest.repos.listPullRequestsAssociatedWithCommit({\n    owner,\n    repo,\n    commit_sha: commitID,\n  });\n\n  if (prs.data.length > 0) {\n    return prs.data\n      .filter(pr => pr.merged_at != null)\n      .sort((prA, prB) => {\n        const prAMergedAt = new Date(prA.merged_at as string);\n        const prBMergedAt = new Date(prB.merged_at as string);\n        return prAMergedAt.getTime() - prBMergedAt.getTime();\n      })\n      .at(0);\n  }\n  return undefined;\n}\n\nexport async function getMetaFromCommit(owner: string, repo: string, commitID: string, options = { withRelatedPullRequest: false })\n    : Promise<{ pull: number | null; user: string | null; }> {\n  const octokit = new Octokit({\n    auth: process.env.GITHUB_TOKEN,\n  });\n\n  let commitAuthorOrPRCreator = null;\n  const commit = await octokit.rest.repos.getCommit({\n    owner,\n    repo,\n    ref: commitID,\n  });\n  commitAuthorOrPRCreator = commit.data.author?.login || null;\n\n  let latestMergedPRNumber = null;\n  if (options.withRelatedPullRequest) {\n    const pull = await getLatestMergedPRAssociatedWithCommit(owner, repo, commitID);\n\n    latestMergedPRNumber = pull?.number || null;\n    if (pull?.user?.login) {\n      commitAuthorOrPRCreator = pull.user.login;\n    }\n  }\n\n  return {\n    pull: latestMergedPRNumber,\n    user: commitAuthorOrPRCreator,\n  };\n}\n"]}