{"version":3,"file":"changelog.js","sourceRoot":"","sources":["../src/changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangelogFunctions } from '@changesets/types';\nimport { getInfo, getInfoFromPullRequest } from '@changesets/get-github-info';\n\nconst changelogFunctions: ChangelogFunctions = {\n  getDependencyReleaseLine: async(\n      changesets,\n      dependenciesUpdated,\n      options,\n  ) => {\n    if (!options.repo) {\n      throw new Error(\n        'Please provide a repo to this changelog generator like this:\\n\"changelog\": [\"@changesets/changelog-github\", { \"repo\": \"org/repo\" }]',\n      );\n    }\n    if (dependenciesUpdated.length === 0) return '';\n\n    const changesetLink = `- Updated dependencies [${(\n      await Promise.all(\n        changesets.map(async(cs) => {\n          if (cs.commit) {\n            const { links } = await getInfo({\n              repo: options.repo,\n              commit: cs.commit,\n            });\n            return links.commit;\n          }\n        }),\n      )\n    )\n      .filter(_ => _)\n      .join(', ')}]:`;\n\n    const updatedDepenenciesList = dependenciesUpdated.map(\n      dependency => `  - ${dependency.name}@${dependency.newVersion}`,\n    );\n\n    return [changesetLink, ...updatedDepenenciesList].join('\\n');\n  },\n  getReleaseLine: async(changeset, type, options) => {\n    if (!options || !options.repo) {\n      throw new Error(\n        'Please provide a repo to this changelog generator like this:\\n\"changelog\": [\"@changesets/changelog-github\", { \"repo\": \"org/repo\" }]',\n      );\n    }\n\n    let prFromSummary: number | undefined;\n    let commitFromSummary: string | undefined;\n    const usersFromSummary: string[] = [];\n\n    const replacedChangelog = changeset.summary\n      .replace(/^\\s*(?:pr|pull|pull\\s+request):\\s*#?(\\d+)/im, (_, pr) => {\n        const num = Number(pr);\n        if (!isNaN(num)) prFromSummary = num;\n        return '';\n      })\n      .replace(/^\\s*commit:\\s*([^\\s]+)/im, (_, commit) => {\n        commitFromSummary = commit;\n        return '';\n      })\n      .replace(/^\\s*(?:author|user):\\s*@?([^\\s]+)/gim, (_, user) => {\n        usersFromSummary.push(user);\n        return '';\n      })\n      .trim();\n\n    const [firstLine, ...futureLines] = replacedChangelog\n      .split('\\n')\n      .map(l => l.trimRight());\n\n    const links = await (async() => {\n      if (prFromSummary !== undefined) {\n        let { links } = await getInfoFromPullRequest({\n          repo: options.repo,\n          pull: prFromSummary,\n        });\n        if (commitFromSummary) {\n          links = {\n            ...links,\n            commit: `[\\`${commitFromSummary}\\`](https://github.com/${options.repo}/commit/${commitFromSummary})`,\n          };\n        }\n        return links;\n      }\n      const commitToFetchFrom = commitFromSummary || changeset.commit;\n      if (commitToFetchFrom) {\n        const { links } = await getInfo({\n          repo: options.repo,\n          commit: commitToFetchFrom,\n        });\n        return links;\n      }\n      return {\n        commit: null,\n        pull: null,\n        user: null,\n      };\n    })();\n\n    const users = usersFromSummary.length\n      ? usersFromSummary\n        .map(\n          userFromSummary => `[@${userFromSummary}](https://github.com/${userFromSummary})`,\n        )\n        .join(', ')\n      : links.user;\n\n    const prefix = [\n      links.pull === null ? '' : ` ${links.pull}`,\n      links.commit === null ? '' : ` ${links.commit}`,\n      users === null ? '' : ` Thanks ${users}!`,\n    ].join('');\n\n    return `\\n\\n-${prefix ? `${prefix} -` : ''} ${firstLine}\\n${futureLines\n      .map(l => `  ${l}`)\n      .join('\\n')}`;\n  },\n};\n\nexport default changelogFunctions;\n"]}